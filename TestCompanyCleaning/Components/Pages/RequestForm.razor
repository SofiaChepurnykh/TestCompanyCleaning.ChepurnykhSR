@page "/request/add"
@page "/request/{Id:int}"

@inject IDataService data
@inject NavigationManager navigate

@if (NotFound)
{
    <div class="alert alert-danger m-3">
        Заявка с ID @Id не найдена
    </div>
    <a class="btn btn-secondary m-3" href="/">Вернуться на главную</a>
}

else if (RequestItem != null)
{
    <EditForm Model="RequestItem" FormName="RequestForm" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@

        <h2>Заявка на клининг</h2>
        <InputNumber @bind-Value="RequestItem.Id" hidden />

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">ФИО</label>
            <InputText @bind-Value="RequestItem.FullName" class="form-control" />
            <ValidationMessage For="() => RequestItem.FullName" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Телефон</label>
            <InputText @bind-Value="RequestItem.PhoneNumber" class="form-control"
                       maxlength="11" inputmode="numeric" pattern="[0-9]*" />
            <ValidationMessage For="() => RequestItem.PhoneNumber" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Офис</label>
            <InputSelect @bind-Value="RequestItem.OfficeAddress" class="form-control">
                <option value="">Выберите офис</option>
                @foreach (var office in RequestItem.AvailableOffices)
                {
                    <option value="@office">@office</option>
                }
            </InputSelect>
            <ValidationMessage For="() => RequestItem.OfficeAddress" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Кабинет</label>
            <InputSelect @bind-Value="RequestItem.Room" class="form-control">
                <option value="">Выберите кабинет</option>
                @foreach (var room in RequestItem.AvailableRooms)
                {
                    <option value="@room">@room</option>
                }
            </InputSelect>
            <ValidationMessage For="() => RequestItem.Room" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Мойка окон</label>
            <InputCheckbox @bind-Value="RequestItem.WindowWashing" class="form-check-input" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Влажная уборка</label>
            <InputCheckbox @bind-Value="RequestItem.WetСleaning" class="form-check-input" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Чистка ковров</label>
            <InputCheckbox @bind-Value="RequestItem.CarpetСleaning" class="form-check-input" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Дезинфекция</label>
            <InputCheckbox @bind-Value="RequestItem.Disinfection" class="form-check-input" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Вынос мусора</label>
            <InputCheckbox @bind-Value="RequestItem.GarbageRemoval" class="form-check-input" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Очистка офисной техники</label>
            <InputCheckbox @bind-Value="RequestItem.OfficeEquipmentCleaning" class="form-check-input" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Дата и время</label>
            <InputDate @bind-Value="RequestItem.RequestedDateTime" class="form-control" min="@MinDateString" />
            <ValidationMessage For="() => RequestItem.RequestedDateTime" />
        </div>

        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Комментарий</label>
            <InputTextArea @bind-Value="RequestItem.Comment" class="form-control" maxlength="200" />
            <ValidationMessage For="() => RequestItem.Comment" />
        </div>

        <div class="btn-group">
            <button class="btn btn-primary m-2" type="submit">Отправить</button>
            <a class="btn btn-secondary m-2" href="/">Отмена</a>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    RequestItem? RequestItem { get; set; }

    bool NotFound = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnInitializedAsync();
        if (RequestItem == null)
        {
            RequestItem = new();
            if (Id != 0)
            {
                var src = await data.GetRequestAsync(Id);

                if (src == null)
                {
                    NotFound = true;
                    return;
                }

                RequestItem = src; 
            }
            else
            {
                RequestItem = new(); 
            }
        }
    }

    async Task ValidSubmit()
    {
        if (RequestItem!.Id == 0)
        {
            RequestItem.CreatedDate = DateTime.Now;
        }
        await data.SaveAsync(RequestItem!);
        navigate.NavigateTo("/");
    }

    string MinDateString => DateTime.Now.ToString("yyyy-MM-dd");
}