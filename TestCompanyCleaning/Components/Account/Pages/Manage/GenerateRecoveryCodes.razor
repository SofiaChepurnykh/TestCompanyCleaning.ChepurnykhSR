@page "/Account/Manage/GenerateRecoveryCodes"

@using Microsoft.AspNetCore.Identity
@using TestCompanyCleaning.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger

<PageTitle>Генерация резервных кодов двухфакторной аутентификации (2FA)</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <h3>Генерация резервных кодов двухфакторной аутентификации (2FA)</h3>
    <div class="alert alert-warning" role="alert">
        <p>
            <span class="glyphicon glyphicon-warning-sign"></span>
            <strong>Сохраните эти коды в надежном месте.</strong>
        </p>
        <p>
            Если вы потеряете устройство и не будете иметь резервных кодов, вы потеряете доступ к своему аккаунту.
        </p>
        <p>
            Генерация новых резервных кодов не изменяет ключи, используемые в приложениях-аутентификаторах. Если вы хотите изменить ключ
            в приложении-аутентификаторе, вам следует <a href="Account/Manage/ResetAuthenticator">сбросить ключи аутентификатора</a>.
        </p>
    </div>
    <div>
        <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <button class="btn btn-danger" type="submit">Сгенерировать резервные коды</button>
        </form>
    </div>
}

@code {
    private string? message;
    private ApplicationUser user = default!;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        if (!isTwoFactorEnabled)
        {
            throw new InvalidOperationException("Невозможно сгенерировать резервные коды, так как двухфакторная аутентификация не включена.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        message = "Вы сгенерировали новые резервные коды.";

        Logger.LogInformation("Пользователь с ID '{UserId}' сгенерировал новые резервные коды 2FA.", userId);
    }
}